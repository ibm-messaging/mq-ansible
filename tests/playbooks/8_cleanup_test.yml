---
- name: Cleanup after tests
  hosts: all
  become: true
  become_user: mqm
  environment:
    PATH: /opt/mqm/bin:{{ ansible_env.PATH }}
  
  tasks:
    - name: Stop qmgr if running
      queue_manager:
        qmname: qm_1
        state: stopped
      register: testout_1
      failed_when: false
    
    - name: Dump stop output
      debug:
        msg: "{{ testout_1 }}"

    - name: Delete qmgr
      until: testout_2.state == 'absent'
      retries: 3
      delay: 1
      queue_manager:
        qmname: qm_1
        state: absent
      register: testout_2
      failed_when: false
    
    - name: Dump delete output
      debug:
        msg: "{{ testout_2 }}"

    - name: Stop qmgr if running
      queue_manager:
        qmname: qm1_running
        state: stopped
      register: testout_1
      failed_when: false
    
    - name: Dump stop output
      debug:
        msg: "{{ testout_1 }}"

    - name: Delete qmgr
      until: testout_2.state == 'absent'
      retries: 3
      delay: 1
      queue_manager:
        qmname: qm1_running
        state: absent
      register: testout_2
      failed_when: false
    
    - name: Dump delete output
      debug:
        msg: "{{ testout_2 }}"

    - name: Delete qmgr
      until: testout_1.state == 'absent'
      retries: 3
      delay: 1
      queue_manager:
        qmname: qm1_present_mqsc
        state: absent
      register: testout_1
      failed_when: false
    
    - name: Stop qmgr if running
      queue_manager:
        qmname: qm1_present_start
        state: stopped
      register: testout_2
      failed_when: false
    
    - name: Delete qmgr
      until: testout_3.state == 'absent'
      retries: 3
      delay: 1
      queue_manager:
        qmname: qm1_present_start
        state: absent
      register: testout_3
      failed_when: false
    
    - name: Stop qmgr if running
      queue_manager:
        qmname: qm1_misc
        state: stopped
      register: testout_1
      failed_when: false
    
    - name: Dump stop output
      debug:
        msg: "{{ testout_1 }}"

    - name: Delete qmgr
      until: testout_2.state == 'absent'
      retries: 3
      delay: 1
      queue_manager:
        qmname: qm1_misc
        state: absent
      register: testout_2
      failed_when: false
    
    - name: Dump delete output
      debug:
        msg: "{{ testout_2 }}"
    
    - name: Stop qmgr if running
      queue_manager:
        qmname: qm1_misc_2
        state: stopped
      register: testout_1
      failed_when: false
    
    - name: Dump stop output
      debug:
        msg: "{{ testout_1 }}"

    - name: Delete qmgr
      until: testout_2.state == 'absent'
      retries: 3
      delay: 1
      queue_manager:
        qmname: qm1_misc_2
        state: absent
      register: testout_2
      failed_when: false
    
    - name: Dump delete output
      debug:
        msg: "{{ testout_2 }}"
    
    - name: Delete qmgr
      until: testout_1.state == 'absent'
      retries: 3
      delay: 1
      queue_manager:
        qmname: qm1_present_mqsc
        state: absent
      register: testout_1
      failed_when: false
    
    - name: Stop qmgr if running
      queue_manager:
        qmname: qm1_present_start
        state: stopped
      register: testout_2
      failed_when: false
    
    - name: Delete qmgr
      until: testout_3.state == 'absent'
      retries: 3
      delay: 1
      queue_manager:
        qmname: qm1_present_start
        state: absent
      register: testout_3
      failed_when: false

    - name: Stop qmgr if running
      queue_manager:
        qmname: qm1_all
        state: stopped
      register: testout_2
      failed_when: false
    
    - name: Delete qmgr
      until: testout_3.state == 'absent'
      retries: 3
      delay: 1
      queue_manager:
        qmname: qm1_all
        state: absent
      register: testout_3
      failed_when: false

    - name: Stop qmgr if running
      queue_manager:
        qmname: qm2_all
        state: stopped
      register: testout_2
      failed_when: false
    
    - name: Delete qmgr
      until: testout_3.state == 'absent'
      retries: 3
      delay: 1
      queue_manager:
        qmname: qm2_all
        state: absent
      register: testout_3
      failed_when: false